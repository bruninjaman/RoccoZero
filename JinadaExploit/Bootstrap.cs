using Divine.Entity;
using Divine.Entity.Entities;
using Divine.Entity.Entities.Abilities.Components;
using Divine.Entity.Entities.Abilities.Spells;
using Divine.Entity.Entities.EventArgs;
using Divine.Entity.Entities.Units.Heroes;
using Divine.Game;
using Divine.Helpers;
using Divine.Menu;
using Divine.Menu.Items;
using Divine.Particle;
using Divine.Particle.EventArgs;
using Divine.Service;
using Divine.Update;

using System.Collections.Generic;

namespace JinadaExploit
{
    public class Bootstrap : Bootstrapper
    {
        Hero LocalHero;
        Spell AbuseAbil;

        Dictionary<AbilityId, (string, string)> AbuseAbils = new Dictionary<AbilityId, (string, string)>
        {
            { AbilityId.bounty_hunter_jinada, ( "attack_jinada_anim", "attack_jinada_alt_anim") },
            //{ AbilityId.nevermore_necromastery, ( "attack01_fast", "attack02_fast") }
        };

        public RootMenu RootMenu { get; private set; }
        public MenuSwitcher Enabled { get; private set; }

        protected override void OnActivate()
        {
            LocalHero = EntityManager.LocalHero;
            foreach (var abuseAbil in AbuseAbils)
            {
                var abil = LocalHero.Spellbook.GetSpellById(abuseAbil.Key);
                if (abil != null)
                {
                    AbuseAbil = abil;
                    continue;
                }
            }

            if (AbuseAbil == null)
                return;

            RootMenu = MenuManager.CreateRootMenu("Jinada Exploit");
            Enabled = RootMenu.CreateSwitcher("Enabled");

            UpdateManager.IngameUpdate += UpdateManager_IngameUpdate;
            Entity.AnimationChanged += Entity_AnimationChanged;
            ParticleManager.ParticleAdded += ParticleManager_ParticleAdded;
        }

        private void ParticleManager_ParticleAdded(ParticleAddedEventArgs e)
        {
            if (!Enabled.Value)
                return;
            if (e.Particle.Name != "particles/generic_gameplay/generic_hit_blood.vpcf")
                return;

            MultiSleeper<string>.Sleeper("SkillAbuse").Reset();
        }

        private void Entity_AnimationChanged(Entity sender, AnimationChangedEventArgs e)
        {
            if (!Enabled.Value)
                return;
            if (sender.Handle != LocalHero.Handle)
                return;

            //Console.WriteLine("AnimName: " + e.Name);
            //Console.WriteLine("AbilBehavior: " + AbuseAbil.AbilityData.AbilityBehavior);
            //Console.WriteLine("Ping: " + GameManager.AvgPing);
            if (AbuseAbil.Level == 0)
                return;

            var networkActivity = AbuseAbils[AbuseAbil.Id];
            if (e.Name == networkActivity.Item1 || e.Name == networkActivity.Item2)
            {
                if (AbuseAbil.IsAutoCastEnabled)
                {
                    AbuseAbil.CastToggleAutocast();
                    MultiSleeper<string>.Sleeper("SkillAbuse").Sleep(9999f);
                }
            }
            else
            {
                MultiSleeper<string>.Sleeper("SkillAbuse").Reset();
            }
        }

        private void UpdateManager_IngameUpdate()
        {
            if (!Enabled.Value)
                return;
            if (AbuseAbil.Level == 0)
                return;

            if (!AbuseAbil.IsAutoCastEnabled && !MultiSleeper<string>.Sleeper("SkillAbuse").Sleeping)
            {
                AbuseAbil.CastToggleAutocast();
                MultiSleeper<string>.Sleeper("SkillAbuse").Sleep(35 + GameManager.AvgPing);
            }
        }

        protected override void OnDeactivate()
        {
            UpdateManager.IngameUpdate -= UpdateManager_IngameUpdate;
            Entity.AnimationChanged -= Entity_AnimationChanged;
            ParticleManager.ParticleAdded -= ParticleManager_ParticleAdded;
        }
    }
}
